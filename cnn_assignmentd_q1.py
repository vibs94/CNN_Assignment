# -*- coding: utf-8 -*-
"""CNN_Assignmentd_Q1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1otiyhXs3tp5udm42YQfd3F78keR47aRY
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import Dense, Conv2D, Dropout, Flatten, MaxPooling2D  

# %matplotlib inline

(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()

"""Dataset dimensions"""

print(f'X_train: {x_train.shape}')
print(f'Y_train: {y_train.shape}')
print(f'X_test: {x_test.shape}')
print(f'Y_test: {y_test.shape}')

"""Show sample data"""

image_index = 7777
print(y_train[image_index]) 
plt.imshow(x_train[image_index], cmap='Greys')

"""Reshaping"""

x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)
x_test = x_test.reshape(x_test.shape[0], 28, 28, 1)
input_shape = (28, 28, 1)

"""Normalizing"""

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255
print(f'x_train shape: {x_train.shape}')
print(f'Number of images in x_train {x_train.shape[0]}')
print(f'Number of images in x_test {x_test.shape[0]}')

"""Model"""

model = Sequential()
model.add(Conv2D(28, kernel_size=(3,3), input_shape=input_shape))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(128, activation=tf.nn.relu))
model.add(Dropout(0.2))
model.add(Dense(10,activation=tf.nn.softmax))

"""Compiling model"""

model.compile(optimizer='adam', 
              loss='sparse_categorical_crossentropy', 
              metrics=['accuracy'])
model.fit(x=x_train,y=y_train, epochs=10)

"""Evaluate model"""

score = model.evaluate(x_test, y_test)
print(f'Test score: {score[0]}')
print(f'Test accuracy: {score[1]}')

"""Visualize results"""

predicted_classes = model.predict_classes(x_test)

correct_indices = np.nonzero(predicted_classes == y_test)[0]

incorrect_indices = np.nonzero(predicted_classes != y_test)[0]

"""Correct results"""

plt.figure()
for i, correct in enumerate(correct_indices[:9]):
    plt.subplot(3,3,i+1)
    plt.imshow(x_test[correct].reshape(28,28), cmap='gray', interpolation='none')
    plt.title("Predicted {}, Class {}".format(predicted_classes[correct], y_test[correct]))
    
plt.tight_layout()

"""Incorrect results"""

plt.figure()
for i, incorrect in enumerate(incorrect_indices[:9]):
    plt.subplot(3,3,i+1)
    plt.imshow(x_test[incorrect].reshape(28,28), cmap='gray', interpolation='none')
    plt.title("Predicted {}, Class {}".format(predicted_classes[incorrect], y_test[incorrect]))
    
plt.tight_layout()